#!/usr/bin/env bash
usage='run [-c|--cores]=CORES [-ts|--tstart]=START [-te|--tend]=END [OPTIONS...] MODEL DIRECTORY'
doc="This script runs the GFDL dry core model in blocks of N days, and processes
the parallel output NetCDF files with './process' before merging them. This means
pressure level interpolation, heat flux calcualtion, etc. are done in parallel
just like the model integration, which can save huge amounts of time. For a
description of namelist/diagnostic table parameters, see README.md.

Usage

  $usage

Positional arguments

  MODEL      The model to be integrated. Should be an executable in the same
             directory as this script with the name 'model.x'
  DIRECTORY  The directory in which model will be run. Copies 'input.nml' and
             'diag_table' files to the top level.

Run mode spec

  This is the experiment mode. Passed with the flag [-m|--mode]=MODE

  * 0 is control run, the default.
  * 1 is radiation off spindown.
  * 2 is radiation off but surface on spindown.
  * 3 is everything off (radiation, surface, and friction) spindown.
  * 4 is friction off spindown.

Flags

  -h|--help          Print this message.
  -i|--init          Exit after saving the 'constants.nc' data.
  -r|--resume        Resume model run from last block with RESTART files in the
                     experiment directory. Use this to resume interrupted runs.
  -rs|--restart      Exit if the experiment ran successfully through time 'tend'.
                     Use this to restart crashed runs with smaller timestep.
  -rt|--restart-tdt  Exit if we have generated tdt files through time 'tend'. Use
                     this when generating data for locked runs.

Configuring the run

  -c=*|--cores=*        Number of cores to use.
  -d=*|--days=*         Number of days in each experiment subfolder.
  -ds=*|--days-save=*   The interval at which restart files are saved (default is --days).
                        This can be set to a multiple of --days to save space.
  -rd=*|--restart=*     The initial restart directory. If this is not a dXXXXX-dYYYYY
                        directory, we search for the last such subdirectory.
  -dt=*|--timestep=*    Timestep in seconds.
  -ts=*|--tstart=*      Initial integration day.
  -te=*|--tend=*        Final integration day.
  -ks=*|--kstart=*      Initial day for which full-resolution data is kept.
  -ke=*|--kend=*        Final day for which full-resolution data is kept.
  -sp=*|--spindown=*    Comma-separated list of days for starting spindown runs.

Input and processing

  -p=*|--process=*         Path to the processing script. Defaults to the included
                           './process' file.
  -pi=*|--process-init=*   Path to processing script for initial 'constants' run.
                           Defaults to nothing.
  -nml=*|--namelist=*      Use this namelist for the experiment. Defaults to the one in
                           the 'exp' folder.
  -diag=*|--diagtable=*    Use this diagnostic table for the experiment. Defaults to the
                           one in the 'exp' folder.
  -field=*|--fieldtable=*  Use this field table for the experiment. Defaults to the one
                           in the 'exp' folder.
  -topo=*|--topography=*   Use this topography data for the experiment. Defaults to no
                           input topography. You must set topography_option='input' in
                           the namelist for this to be used.
  -heat=*|--heating=*       Use this heating data for the experiment. Defaults to no
                           input heating. You must set locked_heating=.true. in the
                           namelist for this to be used.

Other arguments

  All remaining arguments are passed to the 'process' script.
"
# Initial stuff
# export MPI_SHEPHERD=true # see: https://www2.cisl.ucar.edu/sites/default/files/intro_to_hpc.pdf
# when mpiexec_mpt used, MPI_SHEPHERD required, but this failed for me
sdir=$(readlink -f $0)
sdir=${sdir%/*}
source $sdir/header.sh
shopt -u nullglob
ulimit -s unlimited
run=mpirun # for running in parallel
which realpath &>/dev/null || raise "This script requires the 'realpath' command. 'realpath' not found."
which $run &>/dev/null || raise "$run not found in \$PATH."
case ${HOSTNAME%%.*} in
  cheyenne*)
    module load netcdf &>/dev/null
    module load intel &>/dev/null
    module load impi &>/dev/null
    ;;
  monde)
    export PATH="/usr/lib64/mpich/bin:$PATH" # add mpi executable to path
    export LD_LIBRARY_PATH="/usr/lib64/mpich/lib:/usr/local/lib:$LD_LIBRARY_PATH"
    ;;
  *)
    raise "Unknown host, must configure library and binary locations before running."
  ;;
esac

# Parse input arguments
mode=0
cores=8
init=false
resume=false
irestart=false
jrestart=false
tstart=0
tend=0
kstart=0
kend=100000
nml=$sdir/input.nml
diag=$sdir/diag_table
field=$sdir/field_table
pinline=$sdir/process
while [ $# -gt 0 ]; do # echo "Flag: $1"
  case "$1" in
    # Flags
    -h|--help)               echo "$doc" && exit 0 ;;
    -i|--init)               init=true ;;
    -r|--resume)             resume=true ;;
    -rs|--restart)           irestart=true ;;
    -rt|--restart-tdt)       jrestart=true ;;
    -m=*|--mode=*)           mode=${1#*=} ;;
    -c=*|--cores=*)          cores=${1#*=} ;;
    -d=*|--days=*)           days=${1#*=} ;;
    -ds=*|--days-save=*)     sdays=${1#*=} ;;
    -rd=*|--restart=*)       rinit=${1#*=} ;;
    -dt=*|--timestep)        timestep=${1#*=} ;;
    -ts=*|--tstart=*)        tstart=${1#*=} ;;
    -te=*|--tend=*)          tend=${1#*=} ;;
    -ks=*|--kstart=*)        kstart=${1#*=} ;;
    -ke=*|--kend=*)          kend=${1#*=} ;;
    -sp=*|--spindown=*)      spindown=${1#*=} ;;
    -p=*|--process=*)        pinline=${1#*=} ;;
    -pi=*|--process-init=*)  pinit=${1#*=} ;;
    -nml=*|--namelist=*)     nml=${1#*=} ;;
    -diag=*|--diagtable=*)   diag=${1#*=} ;;
    -field=*|--fieldtable=*) field=${1#*=} ;;
    -topo=*|--topography=*)  topo=${1#*=} ;;
    -heat=*|--heating=*)     heat=${1#*=} ;;
    -*)                      gpflags+="$1 " ;;
    # Positional args
    *)
    if [ -z "$model" ]; then
      model="$1"
    elif [ -z "$expdir" ]; then
      expdir="$1"
    else
      raise "This script requires exactly two positional arguments."
    fi
    ;;
  esac
  shift
done
[ -n "$gpflags" ] && echo "Flags passed to processing script: $gpflags"
[ -z "$expdir" ] && raise "You must declare the experiment directory."
[ -z "$model" ] && raise "You must declare the model type name."
! $init && [ $tend -eq 0 ] && raise "You must pass an end time."
if [ -n "$rinit" ] && ! [[ $rinit =~ d.*-d.* ]]; then
  rinits=($rinit/d*-d*)  # pick final day from specified integration
  rinit=${rinits[-1]}
fi

# Default files and scripts
model=$sdir/${model}.x
nml=$(realpath $nml)
diag=$(realpath $diag)
field=$(realpath $field)
pinline=$(realpath $pinline)
heat=$(realpath $heat 2>/dev/null)
topo=$(realpath $topo 2>/dev/null)
pinit=$(realpath $pinit 2>/dev/null)
[ -r "$nml" ] || raise "Namelist file '$nml' not found or is not readable."
[ -r "$diag" ] || raise "Diagnostic table file '$diag' not found or is not readable."
[ -r "$field" ] || raise "Field table file '$field' not found or is not readable."
[ -x "$pinline" ] || raise "Processing script '$pinline' not found or is not executable."
[ -n "$heat" ] && ! [ -r "$heat" ] && raise "Diabatic heating file '$heat' not found or is not readable."
[ -n "$topo" ] && ! [ -r "$topo" ] && raise "Topography file '$topo' not found or is not readable."
[ -n "$pinit" ] && ! [ -x "$pinit" ] && raise "Initial processing script '$pinit' not found or is not executable."
[ -x "$model" ] || raise "Invalid model. The executable '$model' is missing."

# Set up parent experiment directory and files
[ -d $expdir ] || mkdir $expdir || raise "Could not create experiment directory '$expdir'."
cp $nml $expdir/input.nml 2>/dev/null
cp $diag $expdir/diag_table 2>/dev/null
cp $field $expdir/field_table 2>/dev/null
[ -n "$heat" ] && cp $heat $expdir/heating.data.nc 2>/dev/null
[ -n "$topo" ] && cp $topo $expdir/topography.data.nc 2>/dev/null
[ -n "$days" ] && nml_replace $expdir/input.nml days "$days"
[ -n "$timestep" ] && nml_replace $expdir/input.nml dt_atmos "$timestep"

# Restart a run from *beginning*, suitable for when run is unstable
# and we are trying a smaller timestep
if $irestart; then
  edays=($expdir/d?????-d?????)
  edays=(${edays[@]##*d})
  if [ ${edays[-1]} == $tend ]; then
    echo "Model run already completed."
    exit 0
  fi
  echo "Restarting experiment."
fi

# Check that mean NetCDF files exist all the way out, bail if they
# do. Use this to generate tdt files for locked runs.
if $jrestart; then
  edays=($expdir/netcdf/mean_tdt.d?????-d?????.nc)
  edays=(${edays[@]##*d})
  edays=(${edays[@]%.nc})
  if [ ${edays[-1]} == $tend ]; then
    echo "Already generated tdt files."
    exit 0
  fi
  echo "Restarting experiment."
fi

# Check whether this run should be skipped
resume_run() {
  if compgen -G "$1/../netcdf/*${1##*/}.nc" &>/dev/null; then
    echo "Found ${1##*/} files in 'netcdf' folder. Skipping..."
    return 1
  else
    echo "Did not find ${1##*/} files in 'netcdf' folder. Resuming..."
    resume=false
    return 0
  fi
}

# Check whether restart folder is empty
valid_restart() {
  [ -d "$1/RESTART" ] \
    && [ -n "$(ls $1/RESTART/*.nc 2>/dev/null)" ] \
    && [ -r "$1/RESTART/atmos_model.res" ]
}

# Set up working directory
dir_setup() {
  local usage cday cdir rdir
  usage='dir_setup CDAY CDIR [RDIR]'
  cday=$1
  cdir=$2
  rdir=$3
  echo "Setting up working directory ${cdir##*/}..."
  if [ -d $cdir ]; then
    echo "Deleting existing working directory."
    rm -rf $cdir
  fi

  # Make directory and move stuff over
  mkdir $cdir || raise "Failed to create working directory '$cdir'."
  cd $cdir || raise "Failed to move to working directory '$cdir'."
  cp $model .   # move executable inside (declared at top of file)
  mkdir RESTART # model spits out stuff here, can be accepted as input to new iteration
  mkdir INPUT   # model reads from this
  mkdir DATA    # for realistic Earth topography, see topography.html
  touch field_table # just put empty file, if want no tracers

  # Copy existing namelist file over
  # For shutdown experiments, can edit on the fly to turn off
  # radiation, et cetera, but this is starting point
  # cp $expdir/atmos_model.res ./INPUT  # nc-time-axis-friendly *default* start time
  for ifile in input.nml diag_table field_table; do
    cp $expdir/$ifile ./
  done

  # Input files
  heat=$(nml_parse input.nml locked_heating)
  topo=$(nml_parse input.nml topography_option)  # use helper function
  if [ "$heat" == ".true." ]; then
    [ -r $expdir/heating.data.nc ] || raise "Heating file '$expdir/heating.data.nc' not found."
    cp $expdir/heating.data.nc INPUT/
  fi
  if [ "$topo" == "input" ]; then
    [ -r $expdir/topography.data.nc ] || raise "Topography file '$expdir/topography.data.nc' not found."
    cp $expdir/topography.data.nc INPUT/
  fi

  # Namelist changes for spindown runs
  if [ $mode -gt 0 ]; then
    case $mode in   # determine spindown type
      1) nml_replace input.nml ktrop 0 kbl 0 kstrat 0 kmeso 0 ;;  # turn off all thermal damping
      2) nml_replace input.nml ktrop 0 kstrat 0 kmeso 0 ;;  # turn off damping except in boundary layer
      3) nml_replace input.nml ktrop 0 kfric 0 kbl 0 kstrat 0 kmeso 0 ;;  # turn off all damping
      4) nml_replace input.nml kfric 0 ;;  # turn off friction
      *) raise "Unknown experiment identifier '$mode'." ;;
    esac
    nml_print
  fi

  # Copy files and save restart info
  # If this is day 0 'continuation' run, enforce starting time and save restart info
  # in the base experiment directory.
  # WARNING: After day 10000, 'days' field runs into 'month' field in atmos_model.res
  # which causes weird error with 1 timestep in output NetCDF files and data corruption.
  # Editing namelist fails, because 'current time' is overridden by atmos_model.res.
  if $coldstart && [ $cday -eq 0 ] || [ -z "$rdir" ]; then
    echo 'Cold start.'
  else
    valid_restart "$rdir" || raise "Missing restart files in $rdir/RESTART."
    echo "Moving restart files from ${rdir##*/}/RESTART to ${PWD##*/}/INPUT..."
    cp $rdir/RESTART/* INPUT
    printf "Restart directory:\n%s\n" "$rdir/RESTART" > restart.log
    if [ $cday -eq 0 ]; then
      # cp ../atmos_model.res INPUT  # use *default* start time
      cp $rdir/input.nml ../restart.nml  # store the restart namelist in root directory for experiment
      printf "Restart directory:\n%s\n" "$rdir/RESTART" >../restart.log
      sed -i 's/ \+/ /g;s/[0-9]*[1-9][0-9]*/0/g' INPUT/atmos_model.res
    fi
  fi

  return 0
}

# Run the next model step and post-process the NetCDF files
run_model() {
  local usage cday process
  usage='run_model CDAY PROCESS_SCRIPT'
  cday=$1
  process=$2

  # Run model in parallel
  echo "Running model in $(pwd)..."
  $run -np $cores ./${model##*/} &>model.log
  [ -r model.log ] && [ -n "$(cat model.log)" ] \
    || raise "Logfile model.log not found or is empty."
  grep -E 'EXIT CODE: [1-9]|FATAL from PE|WARNING from PE' model.log &>/dev/null \
    && raise "Bad exit status from model run step. Check $(pwd)/model.log"
  valid_restart "$(pwd)" \
    || raise "Missing restart files in $(pwd)/RESTART. Check $(pwd)/model.log"

  tmodel=$(cat model.log | grep 'Total runtime.*' | xargs | cut -d ' ' -f 5)
  echo "Model time: ${tmodel%.*}s."  # is just max of the two

  # Remove some files. Remove input *if* this is not start of new run; in that case
  # we want to keep input so know what's going on.
  [ $cday -gt 0 ] && [ -d INPUT ] && rm -rf INPUT
  [ -r logfile.0000.out ] && mv logfile.0000.out init.log  # contains init info
  [ -r ._mpp.nonrootpe.stdout ] && mv ._mpp.nonrootpe.stdout mpp.log  # contains mpp info
  rm ${model##*/} # remove executable, because takes up space
  if [ -n "$rdir" ] && [ $sdays -gt 0 ] && [ $((cday % sdays)) -ne 0 ]; then  # *end day* of restart block, i.e. current day
    rm -rf $rdir/RESTART  # should *also* never happen using '$rinit' day 0 files
    [ -d $rdir/LOGS ] && rm -rf $rdir/LOGS
    [ -d $rdir/DATA ] && rm -rf $rdir/DATA
    echo "Removed previous restart files."
  fi

  # Process new data, and remove old data
  # Previously we set processor affinities, but didn't help much
  unset pflags
  if [ $cday -ge $kstart ] && [ $cday -lt $kend ]; then
    pflags=' -k'
  else
    echo 'Will remove full resolution netcdf files.'
  fi
  if [ -n "$process" ]; then
    echo "Calling processing script with flags: '$(echo $pflags $gpflags | xargs)'"
    $process $pflags $gpflags &>process.log
    stat=$?
    [ $stat -ne 0 ] && raise "Exit status $stat from processing NetCDF files. Check $(pwd)/process.log"
    tprocess=$(tail -1 process.log | sed 's/[^0-9]*//g')
    echo "Process time: ${tprocess%.*}s."
  fi
}

# Run model for a second to get various *constant* params
run_constants() {
  [ -d $expdir/constants ] || mkdir $expdir/constants
  dir_setup 0 $expdir/constants
  nml_replace $expdir/constants/input.nml dt_atmos 1 days 0 hours 0 minutes 0 seconds 1
  cat >$expdir/constants/diag_table <<EOF
"Constants and initial state for dry core experiments"
0 0 0 0 0 0
# Filename
"constants", 1, "seconds", 1, "days", "time",
# Parameters
"dynamics", "ps",         "ps",         "constants", "all", .false., "none", 2,
"dynamics", "slp",        "slp",        "constants", "all", .false., "none", 2,
"dynamics", "zsurf",      "zsurf",      "constants", "all", .false., "none", 2,
"dynamics", "bk",         "hybi",       "constants", "all", .false., "none", 2,
"dynamics", "pk",         "hyai",       "constants", "all", .false., "none", 2,
"forcing",  "teq",        "teq",        "constants", "all", .false., "none", 2,
"forcing",  "ndamp",      "ndamp",      "constants", "all", .false., "none", 2,
"forcing",  "rdamp",      "rdamp",      "constants", "all", .false., "none", 2,
"forcing",  "sdamp",      "sdamp",      "constants", "all", .false., "none", 2,
"forcing",  "heating",    "heating",    "constants", "all", .false., "none", 2,
"forcing",  "forcing",    "forcing",    "constants", "all", .false., "none", 2,
"forcing",  "ndamp_mean", "ndamp_mean", "constants", "all", .false., "none", 2,
"forcing",  "ndamp_anom", "ndamp_anom", "constants", "all", .false., "none", 2,
"forcing",  "rdamp_mean", "rdamp_mean", "constants", "all", .false., "none", 2,
"forcing",  "rdamp_anom", "rdamp_anom", "constants", "all", .false., "none", 2,
EOF
  echo 'Getting constants...'
  cores=1 run_model 0 $pinit || raise 'Constants run failed. Check log files in the forcing folder.'
  rm -rf $expdir/constants/RESTART  # save space
}

# Run constants function
# WARNING: This requires $pinit to produce constants.nc file
# if ! [ -d $expdir/constants ]; then
coldstart=true  # assume cold start by default
if ! [ -r $expdir/constants.nc ]; then
  run_constants  # only the first time
elif $init; then
  run_constants  # always if --init was passed
  exit 0
fi

# Run control or spindown experiments in blocks of $days days
t0=$(date +%s)
dt=$(nml_parse $expdir/input.nml dt_atmos)
nlat=$(nml_parse $expdir/input.nml lat_max)
days=$(nml_parse $expdir/input.nml days) # number of days in each block
hours=$(nml_parse $expdir/input.nml hours)  # number of hours in each block
minutes=$(nml_parse $expdir/input.nml minutes)  # number of minutes in each block
[ "$dt" -eq 0 ] \
  && raise "Namelist file '$expdir/input.nml\' has model timestep dt_atmos=0. You can change this by providing your own namelist with -nml=file or using the flag -dt=timestep."
[ "$days" -eq 0 ] && [ "$hours" -eq 0 ] && [ "$minutes" -eq 0 ] \
  && raise "Namelist file '$expdir/input.nml' has run length days=0. You can change this by providing your own namelist with -nml=file or using the flag -d=days."
[ "$days" -gt 0 ] && [ -n "$sdays" ] && [ $((sdays % days)) -gt 0 ] \
  && raise "Restart save days $sdays must be even multiple of restart days $days."
echo "100 m/s CFL number: $(calc "100 * $dt / (3.14 * 6.371 * 10^6 / $nlat)")"

# Control experiment
[ $days -eq 0 ] && days=1  # in case user is running test case with hours/minutes
[ -z "$sdays" ] && sdays=$days
if [ $mode -eq 0 ]; then
  # Prepare for the loop
  echo "Running control experiment from day $tstart to day $tend on $cores cores, restart every $days days."
  icday=0
  while [ $icday -lt $tend ]; do
    if [ $icday -ge $tstart ]; then
      # Update directory locations for querying contents
      icdir=$expdir/d$(printf '%05d' $icday)-d$(printf '%05d' $((icday + days)))
      irdir=$expdir/d$(printf '%05d' $((icday - days)))-d$(printf '%05d' $icday)

      # Update the current and restart directories for model run
      if ! $resume || [ $icday -eq 0 ] || valid_restart $irdir; then
        cday=$icday
        cdir=$icdir
        rdir=$irdir
      fi
      if [ -n "$rinit" ]; then  # only if icday is zero
        echo "Using custom restart files from '$rinit'."
        coldstart=false
        rdir=$rinit
      fi

      # Run the model and combine output. Check whether to skip *current* day
      # but fall back to last block for which restart files are available.
      if ! $resume || resume_run "$icdir"; then
        echo "Running from day $cday to day $((cday + days))."
        icday=$cday  # fall back to $cday block
        dir_setup $cday $cdir $rdir
        run_model $cday $pinline
      fi
    fi
    icday=$((icday + days))
    unset rinit
  done

# Spindown experiments
else
  # Iterate through starting days
  spindown=($(echo "$spindown" | tr ',' ' '))
  [ ${#spindown[@]} -eq 0 ] && raise "Must declare starting times for spindown experiments."
  echo "Running spindown experiment $mode from days ${spindown[*]} for $tend days, restart every $days days."
  for eday in "${spindown[@]}"; do
    # Set up loop
    icday=0 # current day relative to start of equilibrium
    ipday=0
    inday=$days # next day, relative to start
    prefix=$expdir/d$(printf '%05d' $eday) # for successive spindown runs
    fstart=$expdir/d$(printf '%05d' $((eday - days)))-d$(printf '%05d' $eday) # for restart files from control
    ts=$(date +%s) # record time
    echo "Starting radiation-off spindown run from day $eday for $tend days."
    while [ $inday -le $tend ]; do
      if [ $icday -ge $tstart ]; then
        # Directory setup
        cdir=$prefix-spindown$mode-d$(printf '%05d' $icday)-d$(printf '%05d' $inday)
        [ $icday -eq 0 ] \
          && rdir=$fstart \
          || rdir=$prefix-spindown$mode-d$(printf '%05d' $ipday)-d$(printf '%05d' $icday)

        # Run the model and combine output
        if ! $resume || resume_run $cdir; then
          echo "Running from day $cday to day $((cday + days))."
          cday=$icday
          dir_setup $cday $cdir $rdir
          run_model $cday $pinline
        fi
      fi

      # Step things forward, for next iteration
      ipday=$icday # previous day
      icday=$((ipday + days))
      inday=$((icday + days))
    done
    echo "Spindown from $eday completed successfully in $(($(date +%s) - ts)) seconds!"
    echo "Timestamp: $(date)."
  done
fi

# Message
if [ -r process.log ]; then  # should be cd'd into last run directory
  tprocess=$(tail -1 process.log | sed 's/[^0-9]*//g')
  echo "Final process time: ${tprocess%.*}s."
fi
echo "The experiment completed successfuly in $(($(date +%s) - t0)) seconds!"
echo "Timestamp: $(date)."
