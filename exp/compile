#!/bin/bash
usage="compile [-hf] [spectral|bgrid|shallow|barotropic]"
doc="Compiles an executable for running a model from the GFDL Flexible
Modelling System. Includes a spectral model, a B-grid model, a finite-volume
model, a shallow-water model, anad a barotropic model.

Usage

  $usage

Options

  -h|--help   Print this message.
  -f|--force  Delete previously compiled source. Otherwise the Makefile
              figures out the fewest files that need to be re-compiled
              based on their last modified dates.
"
# Move to this script's directory
cwd=$(readlink -f ${0})
cwd=${cwd%/*}
cd $cwd || raise "Failed to move to ${cwd}."
source $cwd/header.sh

# Universal flags
# export PATH="/usr/lib64/mpich/bin:$PATH" # add mpi executable to path
export PATH="/opt/pgi/linux86-64/18.10/bin:$PATH"
root=$cwd/../
cppdefs='-Duse_libMPI -Duse_netCDF'
ncflags='-lnetcdff -lnetcdf -lhdf5 -lhdf5_hl'
optimization='-O3' # O2 or O3? more optimization can actually be *slower*, but GFDL default was O3 so maybe not; https://stackoverflow.com/a/19985801/4970632

# Host-specific settings
# Cheyenne uses a compiler wrapper mpif90 that handles all mpi flags,
# so use mpif90/mpiifort (identical) instead of ifort
# Also use Intel MPI or openmpi instead of default mpt
# See: https://www2.cisl.ucar.edu/resources/computational-systems/cheyenne/running-jobs/intel-mpi-and-open-mpi
case ${HOSTNAME%%.*} in
  cheyenne*)
    module load netcdf &>/dev/null
    module load intel &>/dev/null
    module load impi &>/dev/null
    lib=$NETCDF/lib
    include=$NETCDF/include
    fortran=mpiifort
    cpp=mpiicc
    ldflags='-qopenmp' # see: https://www2.cisl.ucar.edu/resources/computational-systems/cheyenne/code-development-support/compiling-code
  ;;
  monde) # where code is compiled
    lib=/usr/lib64/mpich/lib
    include=/usr/include/mpich-x86_64
    fortran=pgf90
    cpp=pgcc
    fpflags='-Ktrap=fp' # see: http://www.dartmouth.edu/~rc/HPC/man/pgf90.html
    ldflags='-Mmpi=mpich'
  ;;
  euclid) # everything is bunched together
    include=/usr/local/include
    lib=/usr/local/lib
    fortran=pgf90
    cpp=pgcc
    fpflags='-Ktrap=fp'
    ldflags='-Mmpi=mpich'
  ;;
  *)
    raise "Unknown host, must configure library and binary locations before running."
  ;;
esac

# Parse input
force=false
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help) echo "$doc" && exit 0 ;;
    -f|--force) force=true ;;
    -*) raise "Unknown argument \"$1\"." ;;
    *)
      [ -n "$model" ] && raise "Must specify just one model name."
      model=$1
      pathnames=$root/path_names_${model}
      [ -r $pathnames ] || raise "Invalid model \"${model}\" -- could not find file \"$pathnames\"."
      ;;
  esac
  shift
done
[ -z "$model" ] && raise "Must specify model name."

# Files
mkmf=$root/bin/mkmf                             # path to executable mkmf
mkmftemplate=$root/bin/mkmf.template            # template of most basic settings
mppnsource=$root/postprocessing/mppnccombine.c  # source code
[ -d bin ] || mkdir bin
cd bin || raise "Failed to move to bin."
[ -r $mppnsource ]   || raise "Could not find mppnccombine source code."
[ -r $mkmftemplate ] || raise "Could not find Makefile template."
[ -r $mkmf ]         || raise "Could not find Makefile-generating utility $mkmf."
which $cpp &>/dev/null || raise "Compiler $cpp not found in \$PATH."

# Create mppnccombine
# NOTE: Don't compile with mpi support, just runs it a bunch of times
t0=$(date +%s)
echo "Compiling mppnccombine..."
$cpp -O -o mppnccombine.x -L$lib -I$include $ncflags $mppnsource \
  || raise "Failed to compile mppnccombine.x."

# Run make clean
if $force && [ -r Makefile ]; then
  make clean
fi

# Build makefile template (assumes pgi bin is on $PATH)
cat > mkmf.template << DELIM
CC = $cpp
FC = $fortran
LD = $fortran
CPPFLAGS =
FFLAGS = -r8 -pc 64 $fpflags $optimization
LDFLAGS = -L$lib $ncflags $ldflags
LIST = -Mlist
DELIM
cat $mkmftemplate >> mkmf.template # appends provided template to custom defs

# Create makefile
echo "Making Makefile..."
$mkmf -p ${model}.x -t mkmf.template -c "$cppdefs" -a $root $pathnames \
  $root/src/shared/mpp/include $root/src/shared/include $include \
  || raise "Failed to make Makefile."

# Compile source
echo "Compiling source code..."
make -f Makefile || raise "Failed to compile ${model}.x."
cp ./*.x ../ 2>/dev/null
echo "This script took $(($(date +%s) - t0)) seconds."
